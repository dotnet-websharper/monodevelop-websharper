<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>IntelliFactory.Xml</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.Xml.SimpleHtml">
<summary>
 Provides utilities for pretty-printing HTML5-flavored HTML.
</summary>
</member>
<member name="P:IntelliFactory.Xml.SimpleXml.INode.Node">
<summary>
 The XML node this object represents.
</summary>
</member>
<member name="T:IntelliFactory.Xml.SimpleXml.INode">
<summary>
 An interface for node-equivalent types.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Node.WriteXml(System.Xml.XmlWriter,IntelliFactory.Xml.SimpleXml.INode)">
<summary>
 Writes the node to a given XML writer.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Node.WriteHtml(System.Web.UI.HtmlTextWriter,IntelliFactory.Xml.SimpleXml.INode)">
<summary>
 Writes the element to a given HTML writer.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Node.ToXml(IntelliFactory.Xml.SimpleXml.INode)">
<summary>
 Writes the node as HTML.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Node.ToXNode(IntelliFactory.Xml.SimpleXml.INode)">
<summary>
 Converts the node to an XNode.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Node.ToHtml(IntelliFactory.Xml.SimpleXml.INode)">
<summary>
 Writes the node as HTML.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Node.RenderXml(System.IO.TextWriter,IntelliFactory.Xml.SimpleXml.INode)">
<summary>
 Writes the node as XML.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Node.RenderHtml(System.IO.TextWriter,IntelliFactory.Xml.SimpleXml.INode)">
<summary>
 Writes the node as HTML.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Node.FromXNode(System.Xml.Linq.XNode)">
<summary>
 Parses an XNode.
</summary>
</member>
<member name="T:IntelliFactory.Xml.SimpleXml.Node">
<summary>
 Represents simple XML nodes.
</summary>
</member>
<member name="F:IntelliFactory.Xml.SimpleXml.Element.Name">
<summary>
 The qualified name.
</summary>
</member>
<member name="F:IntelliFactory.Xml.SimpleXml.Element.Children">
<summary>
 The children collection.
</summary>
</member>
<member name="F:IntelliFactory.Xml.SimpleXml.Element.Attributes">
<summary>
 The attribute collection.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Element.op_Subtraction``2(IntelliFactory.Xml.SimpleXml.Element,``0)">
<summary>
 Replaces the children.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Element.op_Division(IntelliFactory.Xml.SimpleXml.Element,System.String)">
<summary>
 Replaces the children with a single text node.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Element.op_Addition``1(IntelliFactory.Xml.SimpleXml.Element,``0)">
<summary>
 Replaces the attributes.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Element.WithText(System.String,IntelliFactory.Xml.SimpleXml.Element)">
<summary>
 Replaces the children with a single text node.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Element.WithChildren``2(``0,IntelliFactory.Xml.SimpleXml.Element)">
<summary>
 Replaces the children.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Element.WithAttributes``1(``0,IntelliFactory.Xml.SimpleXml.Element)">
<summary>
 Replaces the attributes.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Element.ToXElement(IntelliFactory.Xml.SimpleXml.Element)">
<summary>
 Converts the element to an XElement.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Element.FromXElement(System.Xml.Linq.XElement)">
<summary>
 Constructs an element from an XElement.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Element.Create(System.String,System.String)">
<summary>
 Constructs an new empty Element.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Element.Create(System.String)">
<summary>
 Constructs an new empty Element.
</summary>
</member>
<member name="T:IntelliFactory.Xml.SimpleXml.Element">
<summary>
 Represents simple XML elements.
</summary>
</member>
<member name="P:IntelliFactory.Xml.SimpleXml.Name.Uri">
<summary>
 The URI part of the name, or an empty string.
</summary>
</member>
<member name="P:IntelliFactory.Xml.SimpleXml.Name.Local">
<summary>
 The local part of the name.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Name.Create(System.String,System.String)">
<summary>
 Creates a new Name with a given URI part.
</summary>
</member>
<member name="M:IntelliFactory.Xml.SimpleXml.Name.Create(System.String)">
<summary>
 Creates a new Name without the URI part.
</summary>
</member>
<member name="T:IntelliFactory.Xml.SimpleXml.Name">
<summary>
 Represents qualified names.
</summary>
</member>
<member name="T:IntelliFactory.Xml.SimpleXml">
<summary>
 Defines data structures and operations for handling
 a simplified XML subset and formatting it to HTML and XML.
 As a convenience for generating HTML, CDATA nodes are interpreted
 as &quot;raw&quot; HTML during HTML generation.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Template`1.WithAsync``2(System.String,Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Control.FSharpAsync{``0}})">
<summary>
 Adds an node-sequence-valued placeholder.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Template`1.WithAsync(System.String,Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Control.FSharpAsync{IntelliFactory.Xml.SimpleXml.Element}})">
<summary>
 Adds an element-valued placeholder.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Template`1.WithAsync(System.String,Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Control.FSharpAsync{System.String}})">
<summary>
 Adds a string-valued placeholder.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Template`1.With``2(System.String,System.Func{`0,``0})">
<summary>
 Adds an node-sequence-valued placeholder.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Template`1.With(System.String,System.Func{`0,IntelliFactory.Xml.SimpleXml.Element})">
<summary>
 Adds an element-valued placeholder.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Template`1.With(System.String,System.Func{`0,System.Boolean})">
<summary>
 Adds a bool-valued placeholder.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Template`1.With(System.String,System.Func{`0,System.Double})">
<summary>
 Adds a float-valued placeholder.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Template`1.With(System.String,System.Func{`0,System.Int32})">
<summary>
 Adds a int-valued placeholder.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Template`1.With(System.String,System.Func{`0,System.String})">
<summary>
 Adds a string-valued placeholder.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Template`1.ParseString(System.String)">
<summary>
 Parses a given string as a template.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Template`1.ParseNodes``2(``0)">
<summary>
 Parses a given node sequence as a template.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Template`1.ParseFragmentFile(System.String)">
<summary>
 Similar to Parse, but admits XML fragment files (multiple roots).
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Template`1.ParseElement(IntelliFactory.Xml.SimpleXml.Element)">
<summary>
 Parses a given element as a template.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Template`1.Parse(System.String)">
<summary>
 Parses and pre-processes a given XML file to obtain an
 efficient formatter from &apos;T to XML.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Template`1.Convert``1(System.Func{``0,`0})">
<summary>
 Changes the type of objects the template accepts.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Template`1.#ctor">
<summary>
 Starts defining a custom template.
</summary>
</member>
<member name="T:IntelliFactory.Xml.Templating.Template`1">
<summary>
 Represents a function from &apos;T to SimpleXml.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.CustomTemplate`3.WithAsync``1(System.String,Microsoft.FSharp.Core.FSharpFunc{`2,Microsoft.FSharp.Control.FSharpAsync{``0}})">
<summary>
 Adds an node-sequence-valued placeholder.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.CustomTemplate`3.WithAsync(System.String,Microsoft.FSharp.Core.FSharpFunc{`2,Microsoft.FSharp.Control.FSharpAsync{`0}})">
<summary>
 Adds an element-valued placeholder.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.CustomTemplate`3.WithAsync(System.String,Microsoft.FSharp.Core.FSharpFunc{`2,Microsoft.FSharp.Control.FSharpAsync{System.String}})">
<summary>
 Adds a string-valued placeholder.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.CustomTemplate`3.With``1(System.String,System.Func{`2,``0})">
<summary>
 Adds an node-sequence-valued placeholder.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.CustomTemplate`3.With(System.String,System.Func{`2,`0})">
<summary>
 Adds an element-valued placeholder.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.CustomTemplate`3.With(System.String,System.Func{`2,System.String})">
<summary>
 Adds a string-valued placeholder.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.CustomTemplate`3.ParseString(System.String)">
<summary>
 Parses a given string as a template.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.CustomTemplate`3.ParseNodes``2(``0)">
<summary>
 Parses a given node sequence as a template.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.CustomTemplate`3.ParseFragmentFile(System.String)">
<summary>
 Similar to Parse, but admits XML fragment files (multiple roots).
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.CustomTemplate`3.ParseElement(IntelliFactory.Xml.SimpleXml.Element)">
<summary>
 Parses a given element as a template.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.CustomTemplate`3.Parse(System.String)">
<summary>
 Parses and pre-processes a given XML file to obtain an
 efficient formatter from &apos;T to XML.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.CustomTemplate`3.Convert``1(System.Func{``0,`2})">
<summary>
 Changes the type of objects the template accepts.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.CustomTemplate`3.#ctor(IntelliFactory.Xml.Templating.IXml{`0,`1})">
<summary>
 Starts defining a custom template.
</summary>
</member>
<member name="T:IntelliFactory.Xml.Templating.CustomTemplate`3">
<summary>
 Represents a function from &apos;T to a custom XML interpretation.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.IXml`2.Text(System.String)">
<summary>
 Constructs a Text node.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.IXml`2.ElementNode(`0)">
<summary>
 Embeds elements into nodes.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.IXml`2.Element``1(IntelliFactory.Xml.SimpleXml.Name,``0,System.Collections.Generic.IEnumerable{`1})">
<summary>
 Constructs an Element node.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.IXml`2.CData(System.String)">
<summary>
 Constructs a CData node.
</summary>
</member>
<member name="T:IntelliFactory.Xml.Templating.IXml`2">
<summary>
 Represents a custom XML interpretation parameterized
 by the representation of a XML nodes and elements.
 Allows constructing arbitrary XML in this interpretation.
</summary>
</member>
<member name="P:IntelliFactory.Xml.Templating.ParseException.Messages">
<summary>
 Sequence of validation messages.
</summary>
</member>
<member name="T:IntelliFactory.Xml.Templating.ParseException">
<summary>
 Thrown on template parse errors.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Formatter`2.RunAsync(`0)">
<summary>
 Runs the formatter.
</summary>
</member>
<member name="M:IntelliFactory.Xml.Templating.Formatter`2.Run(`0)">
<summary>
 Runs the formatter.
</summary>
</member>
<member name="T:IntelliFactory.Xml.Templating.Formatter`2">
<summary>
 Represents a compiled template.
</summary>
</member>
<member name="T:IntelliFactory.Xml.Templating">
 <summary>
 Implements simple XML templating with <c>${foo}</c>,
 <c>data-hole="foo"</c> and <c>data-replace="foo"</c> syntax.
 </summary>
 <remarks>
 <p>A <c>Template&lt;'T&gt;</c> value basically
 represents a function from 'T to XML described by an XML file.
 Typical usage is to define a template, add placeholders, and parse
 a given XML file defining the template function, to obtain an efficient
 formatter for a given type:</p>

 <code><![CDATA[
     let formatter =
         Template<Person>()
             .With("name", fun p -> p.Name)
             .With("age", fun p -> p.Age)
             .Parse(__SOURCE_DIRECTORY__ + "\templates\Person.xml")
 ]]></code>

 <p>The XML syntax distinguishes between text-valued and element or
 element-sequence placeholders.  Text placeholders can appear in text
 nodes and attributes.  Element placeholders either replace or fill elements
 marked with <c>data-hole</c> or <c>data-replace</c> attributes. For example:</p>

 <code><![CDATA[
 <html>
   <head><title>${title}</title></head>
   <body>
    <div data-hole="main" id="main">
     <p>Some sample content here that is replaced during expansion.</p>
    </div>
   </body>
 </html>
 ]]></code>
 </remarks>
</member>
</members>
</doc>
